// Copyright (c) 2021 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

# Collection of knowledgebases owned by a user.
public type KnowledgebasesDTO record {
    # Collection of knowledgebase records.
    KnowledgebaseDTO[] knowledgebases?;
};

# Input to create KB.
public type CreateKbInputDTO record {
    # list of QNA to be added to the index. Ids are generated by the service and should be omitted.
    QnADTO[] qnaList?;
    # List of URLs to be added to knowledgebase.
    string[] urls?;
    # List of files to be added to knowledgebase.
    FileDTO[] files?;
};

# Record to track long running operation.
public type Operation record {
    # Enumeration of operation states.
    OperationState operationState;
    # Timestamp when the operation was created.
    string createdTimestamp;
    # Timestamp when the current state was entered.
    string lastActionTimestamp;
    # Relative URI to the target resource location for completed resources.
    string resourceLocation?;
    # User Id
    string userId?;
    # Operation Id.
    string operationId?;
    # Error details in case of failures.
    record {*ErrorResponse;} errorResponse?;
};

# Active Learning settings.
public type ActiveLearningSettingsDTO record {
    # A True or False parameter denoting if Active Learning is enabled.
    string enable?;
};

# Name - value pair of metadata.
public type MetadataDTO record {
    # Metadata name.
    string name;
    # Metadata value.
    string value;
};

# List of QnADTO
public type QnADocumentsDTO record {
    # List of answers.
    QnADTO[] qnaDocuments?;
};

# Response schema for CreateKb operation.
public type KnowledgebaseDTO record {
    # Unique id that identifies a knowledgebase.
    string id?;
    # URL host name at which the knowledgebase is hosted.
    string hostName?;
    # Time stamp at which the knowledgebase was last accessed (UTC).
    string lastAccessedTimestamp?;
    # Time stamp at which the knowledgebase was last modified (UTC).
    string lastChangedTimestamp?;
    # Time stamp at which the knowledgebase was last published (UTC).
    string lastPublishedTimestamp?;
    # Friendly name of the knowledgebase.
    string name?;
    # User who created / owns the knowledgebase.
    string userId?;
    # URL sources from which Q-A were extracted and added to the knowledgebase.
    string[] urls?;
    # Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.
    string[] sources?;
};

# PATCH Body schema to represent list of Metadata to be updated
public type UpdateMetadataDTO record {
    # List of Metadata associated with answer to be deleted
    MetadataDTO[] delete?;
    # List of Metadat associated with answer to be added
    MetadataDTO[] add?;
};

# Post body schema for CreateKb operation.
public type CreateKbDTO record {
    # Friendly name for the knowledgebase.
    string name;
    # List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
    QnADTO[] qnaList?;
    # List of URLs to be used for extracting Q-A.
    string[] urls?;
    # List of files from which to Extract Q-A.
    FileDTO[] files?;
};

# Contains list of QnAs to be updated
public type UpdateKbOperationDTO record {
    # An instance of CreateKbInputDTO for add operation
    record {*CreateKbInputDTO;} add?;
    # An instance of DeleteKbContentsDTO for delete Operation
    record {*DeleteKbContentsDTO;} delete?;
    # An instance of UpdateKbContentsDTO for Update Operation
    record {*UpdateKbContentsDTO;} update?;
};

# Endpoint settings.
public type EndpointSettingsDTO record {
    # An instance of ActiveLearningSettingsDTO active learning settings.
    record {*ActiveLearningSettingsDTO;} activeLearning?;
};

# PATCH Body schema for Update Qna List
public type UpdateQnaDTO record {
    # Unique id for the Q-A
    int id?;
    # Answer text
    string answer?;
    # Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
    string 'source?;
    # List of questions associated with the answer.
    record {*UpdateQuestionsDTO;} questions?;
    # List of metadata associated with the answer to be updated
    record {*UpdateMetadataDTO;} metadata?;
    # Context associated with Qna to be updated.
    record {*UpdateContextDTO;} context?;
};

# PATCH body schema of Delete Operation in UpdateKb
public type DeleteKbContentsDTO record {
    # List of Qna Ids to be deleted
    int[] ids?;
    # List of sources to be deleted from knowledgebase.
    string[] sources?;
};

# DTO to hold details of uploaded files.
public type FileDTO record {
    # File name. Supported file types are ".tsv", ".pdf", ".txt", ".docx", ".xlsx".
    string fileName;
    # Public URI of the file.
    string fileUri;
};

# Enumeration of knowledgebase environments.
public type KnowledgebaseEnvironment string;

# Prompt for an answer.
public type PromptDTO record {
    # Index of the prompt - used in ordering of the prompts
    int displayOrder?;
    # Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.
    int qnaId?;
    # QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
    record {*QnADTO;} qna?;
    # Text displayed to represent a follow up question prompt
    string displayText?;
};

# An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
public type InnerErrorModel record {
    # A more specific error code than was provided by the containing error.
    string code?;
    # An object containing more specific information than the current object about the error.
    record {*InnerErrorModel;} innerError?;
};

# Update Body schema to represent context to be updated
public type UpdateContextDTO record {
    # List of prompts associated with qna to be deleted
    int[] promptsToDelete?;
    # List of prompts to be added to the qna.
    PromptDTO[] promptsToAdd?;
    # To mark if a prompt is relevant only with a previous question or not.
    # true - Do not include this QnA as search result for queries without context
    # false - ignores context and includes this QnA in search result
    boolean isContextOnly?;
};

# Collection of word alterations.
public type WordAlterationsDTO record {
    # Collection of word alterations.
    AlterationsDTO[] wordAlterations;
};

# The error object. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
public type Error record {
    # One of a server-defined set of error codes.
    record {*ErrorCode;} code;
    # A human-readable representation of the error.
    string message?;
    # The target of the error.
    string target?;
    # An array of details about specific errors that led to this reported error.
    Error[] details?;
    # An object containing more specific information than the current object about the error.
    record {*InnerErrorModel;} innerError?;
};

# Schema for EndpointKeys generate/refresh operations.
public type EndpointKeysDTO record {
    # Primary Access Key.
    string primaryEndpointKey?;
    # Secondary Access Key.
    string secondaryEndpointKey?;
    # Current version of runtime.
    string installedVersion?;
    # Latest version of runtime.
    string lastStableVersion?;
};

# Error response. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
public type ErrorResponse record {
    # The error object.
    record {*Error;} _error?;
};

# Post body schema for Replace KB operation.
public type ReplaceKbDTO record {
    # List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.
    QnADTO[] qnaList;
};

# Context associated with Qna.
public type ContextDTO record {
    # To mark if a prompt is relevant only with a previous question or not.
    # true - Do not include this QnA as search result for queries without context
    # false - ignores context and includes this QnA in search result
    boolean isContextOnly?;
    # List of prompts associated with the answer.
    PromptDTO[20] prompts?;
};

# Human readable error code.
public type ErrorCode string;

# Collection of words that are synonyms.
public type AlterationsDTO record {
    # Words that are synonymous with each other.
    string[] alterations;
};

# PATCH Body schema for Update Kb which contains list of questions to be added and deleted
public type UpdateQuestionsDTO record {
    # List of questions to be added
    string[] add?;
    # List of questions to be deleted.
    string[] delete?;
};

# Q-A object.
public type QnADTO record {
    # Unique id for the Q-A.
    int id?;
    # Answer text
    string answer;
    # Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
    string 'source?;
    # List of questions associated with the answer.
    string[] questions;
    # List of metadata associated with the answer.
    MetadataDTO[] metadata?;
    # Context of a QnA
    record {*ContextDTO;} context?;
};

# Enumeration of operation states.
public type OperationState string;

# PATCH body schema for Update operation in Update Kb
public type UpdateKbContentsDTO record {
    # Friendly name for the knowledgebase.
    string name?;
    # List of Q-A (UpdateQnaDTO) to be added to the knowledgebase.
    UpdateQnaDTO[] qnaList?;
    # List of existing URLs to be refreshed. The content will be extracted again and re-indexed.
    string[] urls?;
};
